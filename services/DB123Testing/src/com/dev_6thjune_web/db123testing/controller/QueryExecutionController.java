/*Copyright (c) 2017-2018 offline.com All Rights Reserved.
 This software is the confidential and proprietary information of offline.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with offline.com*/

package com.dev_6thjune_web.db123testing.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.dev_6thjune_web.db123testing.AllTypes;
import com.dev_6thjune_web.db123testing.service.DB123TestingQueryExecutorService;
import com.dev_6thjune_web.db123testing.models.query.*;

@RestController(value = "DB123Testing.QueryExecutionController")
@RequestMapping("/DB123Testing/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private DB123TestingQueryExecutorService queryService;

    @RequestMapping(value = "/queries/update_query", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update_query")
    public IntegerWrapper executeUpdate_query(@Valid @RequestPart("wm_data_json") UpdateQueryRequest updateQueryRequest, @RequestPart(value = "Icon") MultipartFile icon, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: update_query");
        updateQueryRequest.setIcon(WMMultipartUtils.toByteArray(icon));
        Integer _result = queryService.executeUpdate_query(updateQueryRequest);
        LOGGER.debug("got the result for named query: update_query, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/select1", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "select")
    public Page<Select1Response> executeSelect1(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: select1");
        Page<Select1Response> _result = queryService.executeSelect1(pageable);
        LOGGER.debug("got the result for named query: select1, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{id}/content/{_fieldName_}");
        for(Select1Response _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("id", _content.getId());
            _properties.put("_fieldName_", "blobCol");
            if(_content.getBlobCol() != null) {
                _content.setBlobCol(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setBlobCol(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol query select1")
    @RequestMapping(value = "/queries/select1/{id}/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSelect1(@PathVariable("id") Integer id, @RequestParam(value="download", defaultValue = "false") boolean download, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: select1");

        InputStream _result = queryService.getBlobColContentForSelect1(id);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, download);
    }

    @ApiOperation(value = "Returns downloadable file for query select1")
    @RequestMapping(value = "/queries/select1/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSelect1(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: select1");

        return queryService.exportSelect1(exportType, pageable);
    }

    @RequestMapping(value = "/queries/cdz", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "cd")
    public Page<AllTypes> executeCdz(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: cdz");
        Page<AllTypes> _result = queryService.executeCdz(pageable);
        LOGGER.debug("got the result for named query: cdz, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query cdz")
    @RequestMapping(value = "/queries/cdz/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCdz(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: cdz");

        return queryService.exportCdz(exportType, pageable);
    }

}


