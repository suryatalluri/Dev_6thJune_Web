/*Copyright (c) 2017-2018 offline.com All Rights Reserved.
 This software is the confidential and proprietary information of offline.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with offline.com*/

package com.dev_6thjune_web.test_blob1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.dev_6thjune_web.test_blob1.models.query.InsertQueryRequest;
import com.dev_6thjune_web.test_blob1.models.query.UpdateQueryRequest;
import com.dev_6thjune_web.test_blob1.service.Test_blob1QueryExecutorService;

@RestController(value = "Test_blob1.QueryExecutionController")
@RequestMapping("/test_blob1/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Test_blob1QueryExecutorService queryService;

    @RequestMapping(value = "/queries/Update_query", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update_query")
    public IntegerWrapper executeUpdate_query(@Valid @RequestBody UpdateQueryRequest updateQueryRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Update_query");
        Integer _result = queryService.executeUpdate_query(updateQueryRequest);
        LOGGER.debug("got the result for named query: Update_query, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/insert_query", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "insert_query")
    public IntegerWrapper executeInsert_query(@Valid @RequestBody InsertQueryRequest insertQueryRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: insert_query");
        Integer _result = queryService.executeInsert_query(insertQueryRequest);
        LOGGER.debug("got the result for named query: insert_query, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}


